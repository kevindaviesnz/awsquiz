Thoughts on caching:
    Not caching is less complicated from the frontend point of view.
    Caching = less lambda calls.
    But even if we the quizzes are < 10 questions the number of lambda calls can 
    increase exponentially as the number of users increase.
    No cachine makes it much harder to scale.
My recommendation would be that caching overweighs any extra complexity on the frontend
so we should go with that.

SQL vs NoSQL

Some thoughts on whether to use an SQL or NoSQL db.
1. If this was real life project what I would see is users going to the site and doing short fun quizzes.
2. As time goes on the site would get more and more users and lots of db reads. 
3. The only time the db would change is when an admin is adding new questions and making corrections.
4. It would be far easier to make corrections with regards to NoSQL db as a question can be grouped together with the possible answers.
5. I don't see consistency as being important.
6. It'd be good to be able to add extra "fields" to a question in addition to possible answers eg difficulty ranking etc.
So overall I think we should go with a NoSQL db.

State machine or lambda function
I've chosen to use a lambda function that queries dynamodb instead of a State machine.
The idea here was for the API Gateway to invoke a State machine that would run a dynamodb query task and return the result to the 
web page. This turned out to be not possible as invoking a State machine is an "async" process and returns only the 
execution arn and the start time. To get around it you would need to have a lambda function execute the State machine, 
and inside the lambda function poll the execution arn and then return results. This of course negates any advantages of 
having the API Gateway invoke a State machine.

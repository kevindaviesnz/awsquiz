Thoughts on caching:
    Not caching is less complicated from the frontend point of view.
    Caching = less lambda calls.
    But even if we the quizzes are < 10 questions the number of lambda calls can 
    increase exponentially as the number of users increase.
    No cachine makes it much harder to scale.
My recommendation would be that caching overweighs any extra complexity on the frontend
so we should go with that.

SQL vs NoSQL

Some thoughts on whether to use an SQL or NoSQL db.
1. If this was real life project what I would see is users going to the site and doing short fun quizzes.
2. As time goes on the site would get more and more users and lots of db reads. 
3. The only time the db would change is when an admin is adding new questions and making corrections.
4. It would be far easier to make corrections with regards to NoSQL db as a question can be grouped together with the possible answers.
5. I don't see consistency as being important.
6. It'd be good to be able to add extra "fields" to a question in addition to possible answers eg difficulty ranking etc.
So overall I think we should go with a NoSQL db.

State Machine invocation
How to Invoke the Step Function from Lambda:
https://kashyapgohil25.medium.com/how-to-invoke-the-step-function-from-lambda-7ff0b7812554
I'm thinking about having the API Gateway through a GET request calling a lambda function that 
activates a State Machine, that will call a lambda function that will pass "search" parameters to
 a dynamodb query task, that will send the result to another lambda function that will format the 
 results back to the frontend. Basically 
Gateway -> lambda to call State Machine (lambda to pass search params -> DynamoDB query ->
 Lambda to format result) -> Frontend.  Lambda to format the result isn't actually required as 
 the result from the dynamodb query can be just sent to the frontend as is.  The advantage is that 
 we can keep the lambda functions fairly simple and focused - eg we don't have to including any 
 SDK code that queries the DynamoDB table.